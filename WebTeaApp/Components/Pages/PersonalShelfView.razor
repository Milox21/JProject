@page "/PersonalShelfView"

@using WebTeaApp.Models
@using WebTeaApp.Services

@inject ApiConnectionService<PersonalBrewingHistory> PersonalBrewingHistoryService
@inject ApiConnectionService<PersonalShelf> PersonalShelfService
@inject AuthService AuthService
@inject NavigationManager NavigationManager

@if (personalShelves == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container mt-4">
        @foreach (var shelf in personalShelves)
        {
            <div class="card mb-3 custom-shadow">
                <div class="card-header bg-dark text-white">
                    <h4 class="mb-0">@shelf.Tea.Name</h4>
                </div>
                <div class="card-body">
                    <p>Amount: @shelf.Amount g</p>
                    <p>Country of Origin: @shelf.Tea.CountryOrigin</p>
                    <div class="mb-3">
                        <label class="form-label">Note:</label>
                        <input type="text" class="form-control" @bind="shelf.Note">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Rating:</label>
                        <input type="number" class="form-control" @bind="shelf.Rating" min="1" max="5">
                    </div>
                    <div class="d-flex justify-content-between">
                        <button class="btn btn-outline-primary" @onclick="() => Save(shelf)">Save</button>
                        <button class="btn btn-outline-danger" @onclick="() => Delete(shelf)">Delete</button>
                        <button class="btn btn-outline-success" @onclick="() => ToggleDescription(shelf.Id)">Brew new</button>
                    </div>
                    @if (showDescriptionId == shelf.Id)
                    {
                        <div class="mt-3">
                            <div class="mb-3">
                                <label class="form-label">Temp:</label>
                                <input type="text" class="form-control" @bind="newBrewingHistory.Temp">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Brewing Time:</label>
                                <input type="text" class="form-control" @bind="newBrewingHistory.BrewingTime">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Amount:</label>
                                <input type="text" class="form-control" @bind="newBrewingHistory.Amount">
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Note:</label>
                                <input type="text" class="form-control" @bind="newBrewingHistory.Note">
                            </div>
                            <button class="btn btn-outline-success" @onclick="() => CreateBrewingHistory(shelf)">Create Brewing History</button>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
}

<style>
    .custom-shadow {
        box-shadow: 5px 4px 8px rgba(0, 0, 0, 1);
    }
</style>

@code {
    private List<PersonalShelf>? personalShelves;
    private int? showDescriptionId;
    private PersonalBrewingHistory newBrewingHistory = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        personalShelves = await PersonalShelfService.GetResources($"api/PersonalShelf/all/{AuthService.Id}");
    }

    private async Task Save(PersonalShelf shelf)
    {
        await PersonalShelfService.PutResource($"api/PersonalShelf/{shelf.Id}", shelf);
    }

    private async Task Delete(PersonalShelf shelf)
    {
        await PersonalShelfService.DeleteResource($"api/PersonalShelf/{shelf.Id}");
        await LoadData();
    }

    private void ToggleDescription(int shelfId)
    {
        showDescriptionId = showDescriptionId == shelfId ? (int?)null : shelfId;
    }

    private async Task CreateBrewingHistory(PersonalShelf shelf)
    {
        var brewingHistory = new PersonalBrewingHistory
            {
                PersonalShelfId = shelf.Id,
                Temp = newBrewingHistory.Temp,
                BrewingTime = newBrewingHistory.BrewingTime,
                Amount = newBrewingHistory.Amount,
                Note = newBrewingHistory.Note,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow,
                IsActive = true
            };

        await PersonalBrewingHistoryService.PostResource("api/PersonalBrewingHistory", brewingHistory);

        NavigationManager.NavigateTo("/BrewingHistoryView");
    }
}
